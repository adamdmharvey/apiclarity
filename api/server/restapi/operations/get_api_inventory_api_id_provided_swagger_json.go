// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIInventoryAPIIDProvidedSwaggerJSONHandlerFunc turns a function with the right signature into a get API inventory API ID provided swagger JSON handler
type GetAPIInventoryAPIIDProvidedSwaggerJSONHandlerFunc func(GetAPIInventoryAPIIDProvidedSwaggerJSONParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIInventoryAPIIDProvidedSwaggerJSONHandlerFunc) Handle(params GetAPIInventoryAPIIDProvidedSwaggerJSONParams) middleware.Responder {
	return fn(params)
}

// GetAPIInventoryAPIIDProvidedSwaggerJSONHandler interface for that can handle valid get API inventory API ID provided swagger JSON params
type GetAPIInventoryAPIIDProvidedSwaggerJSONHandler interface {
	Handle(GetAPIInventoryAPIIDProvidedSwaggerJSONParams) middleware.Responder
}

// NewGetAPIInventoryAPIIDProvidedSwaggerJSON creates a new http.Handler for the get API inventory API ID provided swagger JSON operation
func NewGetAPIInventoryAPIIDProvidedSwaggerJSON(ctx *middleware.Context, handler GetAPIInventoryAPIIDProvidedSwaggerJSONHandler) *GetAPIInventoryAPIIDProvidedSwaggerJSON {
	return &GetAPIInventoryAPIIDProvidedSwaggerJSON{Context: ctx, Handler: handler}
}

/* GetAPIInventoryAPIIDProvidedSwaggerJSON swagger:route GET /apiInventory/{apiId}/provided_swagger.json getApiInventoryApiIdProvidedSwaggerJson

Get provided API spec json file

*/
type GetAPIInventoryAPIIDProvidedSwaggerJSON struct {
	Context *middleware.Context
	Handler GetAPIInventoryAPIIDProvidedSwaggerJSONHandler
}

func (o *GetAPIInventoryAPIIDProvidedSwaggerJSON) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAPIInventoryAPIIDProvidedSwaggerJSONParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
