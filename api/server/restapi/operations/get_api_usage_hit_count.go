// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIUsageHitCountHandlerFunc turns a function with the right signature into a get API usage hit count handler
type GetAPIUsageHitCountHandlerFunc func(GetAPIUsageHitCountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIUsageHitCountHandlerFunc) Handle(params GetAPIUsageHitCountParams) middleware.Responder {
	return fn(params)
}

// GetAPIUsageHitCountHandler interface for that can handle valid get API usage hit count params
type GetAPIUsageHitCountHandler interface {
	Handle(GetAPIUsageHitCountParams) middleware.Responder
}

// NewGetAPIUsageHitCount creates a new http.Handler for the get API usage hit count operation
func NewGetAPIUsageHitCount(ctx *middleware.Context, handler GetAPIUsageHitCountHandler) *GetAPIUsageHitCount {
	return &GetAPIUsageHitCount{Context: ctx, Handler: handler}
}

/* GetAPIUsageHitCount swagger:route GET /apiUsage/hitCount getApiUsageHitCount

Get a hit count within a selected timeframe for the filtered API events

*/
type GetAPIUsageHitCount struct {
	Context *middleware.Context
	Handler GetAPIUsageHitCountHandler
}

func (o *GetAPIUsageHitCount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAPIUsageHitCountParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
