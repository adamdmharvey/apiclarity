// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetDashboardAPIUsageParams creates a new GetDashboardAPIUsageParams object
//
// There are no default values defined in the spec.
func NewGetDashboardAPIUsageParams() GetDashboardAPIUsageParams {

	return GetDashboardAPIUsageParams{}
}

// GetDashboardAPIUsageParams contains all the bound params for the get dashboard API usage operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDashboardAPIUsage
type GetDashboardAPIUsageParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*End time of the query
	  Required: true
	  In: query
	*/
	EndTime strfmt.DateTime
	/*Start time of the query
	  Required: true
	  In: query
	*/
	StartTime strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDashboardAPIUsageParams() beforehand.
func (o *GetDashboardAPIUsageParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndTime, qhkEndTime, _ := qs.GetOK("endTime")
	if err := o.bindEndTime(qEndTime, qhkEndTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartTime, qhkStartTime, _ := qs.GetOK("startTime")
	if err := o.bindStartTime(qStartTime, qhkStartTime, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndTime binds and validates parameter EndTime from query.
func (o *GetDashboardAPIUsageParams) bindEndTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("endTime", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("endTime", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("endTime", "query", "strfmt.DateTime", raw)
	}
	o.EndTime = *(value.(*strfmt.DateTime))

	if err := o.validateEndTime(formats); err != nil {
		return err
	}

	return nil
}

// validateEndTime carries on validations for parameter EndTime
func (o *GetDashboardAPIUsageParams) validateEndTime(formats strfmt.Registry) error {

	if err := validate.FormatOf("endTime", "query", "date-time", o.EndTime.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStartTime binds and validates parameter StartTime from query.
func (o *GetDashboardAPIUsageParams) bindStartTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("startTime", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("startTime", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("startTime", "query", "strfmt.DateTime", raw)
	}
	o.StartTime = *(value.(*strfmt.DateTime))

	if err := o.validateStartTime(formats); err != nil {
		return err
	}

	return nil
}

// validateStartTime carries on validations for parameter StartTime
func (o *GetDashboardAPIUsageParams) validateStartTime(formats strfmt.Registry) error {

	if err := validate.FormatOf("startTime", "query", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}
	return nil
}
