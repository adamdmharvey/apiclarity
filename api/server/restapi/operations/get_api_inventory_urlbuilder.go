// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetAPIInventoryURL generates an URL for the get API inventory operation
type GetAPIInventoryURL struct {
	APIID                  *string
	HasProvidedSpecIs      *bool
	HasReconstructedSpecIs *bool
	NameContains           []string
	NameEnd                *string
	NameIsNot              []string
	NameIs                 []string
	NameStart              *string
	Page                   int64
	PageSize               int64
	PortIsNot              []string
	PortIs                 []string
	SortDir                *string
	SortKey                string
	Type                   string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAPIInventoryURL) WithBasePath(bp string) *GetAPIInventoryURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetAPIInventoryURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetAPIInventoryURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/apiInventory"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var aPIIDQ string
	if o.APIID != nil {
		aPIIDQ = *o.APIID
	}
	if aPIIDQ != "" {
		qs.Set("apiId", aPIIDQ)
	}

	var hasProvidedSpecIsQ string
	if o.HasProvidedSpecIs != nil {
		hasProvidedSpecIsQ = swag.FormatBool(*o.HasProvidedSpecIs)
	}
	if hasProvidedSpecIsQ != "" {
		qs.Set("hasProvidedSpec[is]", hasProvidedSpecIsQ)
	}

	var hasReconstructedSpecIsQ string
	if o.HasReconstructedSpecIs != nil {
		hasReconstructedSpecIsQ = swag.FormatBool(*o.HasReconstructedSpecIs)
	}
	if hasReconstructedSpecIsQ != "" {
		qs.Set("hasReconstructedSpec[is]", hasReconstructedSpecIsQ)
	}

	var nameContainsIR []string
	for _, nameContainsI := range o.NameContains {
		nameContainsIS := nameContainsI
		if nameContainsIS != "" {
			nameContainsIR = append(nameContainsIR, nameContainsIS)
		}
	}

	nameContains := swag.JoinByFormat(nameContainsIR, "")

	if len(nameContains) > 0 {
		qsv := nameContains[0]
		if qsv != "" {
			qs.Set("name[contains]", qsv)
		}
	}

	var nameEndQ string
	if o.NameEnd != nil {
		nameEndQ = *o.NameEnd
	}
	if nameEndQ != "" {
		qs.Set("name[end]", nameEndQ)
	}

	var nameIsNotIR []string
	for _, nameIsNotI := range o.NameIsNot {
		nameIsNotIS := nameIsNotI
		if nameIsNotIS != "" {
			nameIsNotIR = append(nameIsNotIR, nameIsNotIS)
		}
	}

	nameIsNot := swag.JoinByFormat(nameIsNotIR, "")

	if len(nameIsNot) > 0 {
		qsv := nameIsNot[0]
		if qsv != "" {
			qs.Set("name[isNot]", qsv)
		}
	}

	var nameIsIR []string
	for _, nameIsI := range o.NameIs {
		nameIsIS := nameIsI
		if nameIsIS != "" {
			nameIsIR = append(nameIsIR, nameIsIS)
		}
	}

	nameIs := swag.JoinByFormat(nameIsIR, "")

	if len(nameIs) > 0 {
		qsv := nameIs[0]
		if qsv != "" {
			qs.Set("name[is]", qsv)
		}
	}

	var nameStartQ string
	if o.NameStart != nil {
		nameStartQ = *o.NameStart
	}
	if nameStartQ != "" {
		qs.Set("name[start]", nameStartQ)
	}

	pageQ := swag.FormatInt64(o.Page)
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	pageSizeQ := swag.FormatInt64(o.PageSize)
	if pageSizeQ != "" {
		qs.Set("pageSize", pageSizeQ)
	}

	var portIsNotIR []string
	for _, portIsNotI := range o.PortIsNot {
		portIsNotIS := portIsNotI
		if portIsNotIS != "" {
			portIsNotIR = append(portIsNotIR, portIsNotIS)
		}
	}

	portIsNot := swag.JoinByFormat(portIsNotIR, "")

	if len(portIsNot) > 0 {
		qsv := portIsNot[0]
		if qsv != "" {
			qs.Set("port[isNot]", qsv)
		}
	}

	var portIsIR []string
	for _, portIsI := range o.PortIs {
		portIsIS := portIsI
		if portIsIS != "" {
			portIsIR = append(portIsIR, portIsIS)
		}
	}

	portIs := swag.JoinByFormat(portIsIR, "")

	if len(portIs) > 0 {
		qsv := portIs[0]
		if qsv != "" {
			qs.Set("port[is]", qsv)
		}
	}

	var sortDirQ string
	if o.SortDir != nil {
		sortDirQ = *o.SortDir
	}
	if sortDirQ != "" {
		qs.Set("sortDir", sortDirQ)
	}

	sortKeyQ := o.SortKey
	if sortKeyQ != "" {
		qs.Set("sortKey", sortKeyQ)
	}

	typeVarQ := o.Type
	if typeVarQ != "" {
		qs.Set("type", typeVarQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetAPIInventoryURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetAPIInventoryURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetAPIInventoryURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetAPIInventoryURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetAPIInventoryURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetAPIInventoryURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
