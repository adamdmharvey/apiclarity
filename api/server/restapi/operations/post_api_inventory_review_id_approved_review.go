// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAPIInventoryReviewIDApprovedReviewHandlerFunc turns a function with the right signature into a post API inventory review ID approved review handler
type PostAPIInventoryReviewIDApprovedReviewHandlerFunc func(PostAPIInventoryReviewIDApprovedReviewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAPIInventoryReviewIDApprovedReviewHandlerFunc) Handle(params PostAPIInventoryReviewIDApprovedReviewParams) middleware.Responder {
	return fn(params)
}

// PostAPIInventoryReviewIDApprovedReviewHandler interface for that can handle valid post API inventory review ID approved review params
type PostAPIInventoryReviewIDApprovedReviewHandler interface {
	Handle(PostAPIInventoryReviewIDApprovedReviewParams) middleware.Responder
}

// NewPostAPIInventoryReviewIDApprovedReview creates a new http.Handler for the post API inventory review ID approved review operation
func NewPostAPIInventoryReviewIDApprovedReview(ctx *middleware.Context, handler PostAPIInventoryReviewIDApprovedReviewHandler) *PostAPIInventoryReviewIDApprovedReview {
	return &PostAPIInventoryReviewIDApprovedReview{Context: ctx, Handler: handler}
}

/* PostAPIInventoryReviewIDApprovedReview swagger:route POST /apiInventory/{reviewId}/approvedReview postApiInventoryReviewIdApprovedReview

Apply the approved review to create the reconstructed spec

*/
type PostAPIInventoryReviewIDApprovedReview struct {
	Context *middleware.Context
	Handler PostAPIInventoryReviewIDApprovedReviewHandler
}

func (o *PostAPIInventoryReviewIDApprovedReview) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAPIInventoryReviewIDApprovedReviewParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
